CRIANDO UM PROJETO:
	Primeiro crie uma pasta para o projeto
	depois crie um ambiente virtual
	por padrão o python tem o venv
	"python -m venv nomeEnv"
	ou pode utilizar o virtualenv
	"python virtualenv nomeEnv"
	Ative a env
	"nomeEnv\Scripts\Activate"
	Instale o Django
	"pip install django"
	
	Por ser a primeira vez utilizando o django tera que criar um projeto
	"django-admin startproject NomedoProjeto ."
	obs: o ponto no final serve para que não crie 2 pastas com o nome do projeto

ARQUIVOS CRIADOS:
	diretorio_externo/
   		manage.py
    		Diretorio_interno/
        		__init__.py
        		settings.py
        		urls.py
        		asgi.py
        		wsgi.py

	* O diretório_externo é um contêiner para o seu projeto.
	Seu nome não importa para Django; você pode renomeá-lo para o que quiser."diretorio_externo\"
	
	* manage.py: Um utilitário de linha de comando que permite que você interaja com o Projeto Django de várias maneiras.
	
	* O diretorio_interno é o pacote Python real para o seu projeto.
	Seu nome é o nome do pacote Python que você precisará usar para importar qualquer coisa dentro dele (por exemplo).

	* mysite/settings.py: Configurações/configuração para este projeto Django.
	As configurações do Django informarão tudo sobre como configurar o trabalho.

	* mysite/urls.py: As declarações de URL para este projeto Django; um "sumário" do seu site com tecnologia Django.

	* mysite/asgi.py: Um ponto de entrada para servidores Web compatíveis com ASGI para que sirva o seu projeto.

	* mysite/wsgi.py: Um ponto de entrada para servidores Web compatíveis com WSGI para que sirva o seu projeto.

O SERVIDOR DE DESENVOLVIMENTO:
	Vamos verificar se o seu projeto django esta funcionando.
	Mude para o "deretorio_externo" caso não estejá nele.
	
	Para iniciarmos o servidor digite:
	"python manage.py runserver"
	Ele devera informar a url do servidor ex: Starting development server at http://127.0.0.1:8000/
	
	* Por padrão, o comando runserver inicia o servidor de desenvolvimento no IP interno na porta 8000.
	Se quiser alterar a porta do servidor, passe como argumento ex: "python manage.py runserver 8080" 8080 é a porta de ex.
	Se quiser alterar o IP do servidor, passe como argumento junto com a porta ex: "python manage.py runserver 0.0.0.0:8000"
	
CRIANDO UM APLICATIVO ENQUETES:
	Agora que seu ambiente(projeto) está configurado, você está pronto para começar.
	
	Cada aplicativo que você escreve no django consiste em um pacote Python que segue uma certa convenção.
	Django vem com um utilitário que gera automaticamente a estrutura básica de diretórios de um aplicativo.
	
	PROJETO VS APLICATIVOS:
		Um aplicativo é um aplicativo Web que faz algo
		- por exemplo, um sistema de blog, um banco de dados de registros públicos ou um pequeno aplicativo de enquete.
		Um projeto é uma coleção de configurações e aplicativos para um determinado site.
		Um projetos pode conter vários aplicativos. Um aplicativo pode estar em vários projetos.

	CRIANDO O APLICATIVO:
		Para criar o aplicativo digite o seguinte comando:
			"python manage.py startapp NomeDoAplicativo"
		Isso criará um diretório com o nome do aplicativo e seus arquivos necessarios:
			
			NomeDoApplicativo/
    				__init__.py
    				admin.py
    				apps.py
    				migrations/
        				__init__.py
   				models.py
   				tests.py
    				views.py

		Essa estrutura de diretórios abrigará o aplicativo.

ESCREVA SUA PRIMEIRA VISUALIZAÇÃO(VIEWS):
	Vamos escrever a primeira visualização.
	Abra o arquivo "NomeDoAplicativo/Views.py"
	Digite o seguinte codigo:
	"from django.http import HttpResponse
	 def index(request):
		return HttpResponse("Olá Mundo!")
	"
	Esta é a views mais simples possivel no django.
	Para chamar a "views", precisamos mapear ele para uma URL e para isto precisamos de um URLconf.
	Para criar a URlconf crie na pasta do Aplicativo um arquivo chamado "urls.py"
	No arquivo inclua o seguinte código:
	"from django.urls import path
	 from . import views
	 urlpatterns = [
		path('', views.index, name='index'),
	 ]
	"

	Agora precisamos apontar o URLconf para a raiz do módulo.
	Para isto, entre no arquivo urls.py dentro do diretorio do projeto.
	adicione o include na importação.
	"from django.urls import path, include"
	E adicione um path com o include na lista do urlpatterns.
	"path('NomeDoApp/', include('NomeDoApp.urls'))"
	
	A função include() permite referenciar outros URLconfs.
	
	Agora você conectou uma view a um URLconf. Verifique se está funcionando com o comando:
	"python manage.py runserver"

ARGUMENTOS DO PATH():
	A função path() é passada quatro argumentos, dois necessários, e dois opcionais.
	Neste ponto, vale a pena rever para que servem esses argumentos.
	
	path() argumento: route
		route é uma cadeia de caracteres que contém um padrão de URL.
		Ao processar uma solicitação, Django começa no primeiro padrão e faz o seu caminho para baixo a lista, comparando a URL solicitada com cada padrão até encontrar um que combina.

	path() argumento: view
		Quando o Django encontra um padrão correspondente, ele chama a função de exibição especificada com um objeto HttpRequest como o primeiro argumento e qualquer valores "capturados" da rota como argumentos de palavra-chave.

	path() argumento: kwargs
		Argumentos de palavras-chave arbitrárias podem ser passados em um dicionário para a exibição de destino.

	path() argumento: name
		Nomear seu URL permite que você se refira a ele inequivocamente de outro lugar no Django, especialmente de dentro de modelos. Este poderoso recurso permite que você faça alterações globais nos padrões de URL do seu projeto enquanto toca apenas em um único arquivo.

CONFIGURANDO O BANCO DE DADOS:
	Por padrão, a configuração usa SQLite.
	Ao iniciar seu primeiro projeto real, você pode querer usar um banco de dados mais escalável como o PostgreSQL, para evitar dores de cabeça de comutação de banco de dados lá na frente.

	Se você deseja usar outro banco de dados, instale o banco de dados apropriado e altere as seguintes chaves no item DATABASES dentro do arquivo settings.py para corresponder à sua conexão de banco de dados.

	* ENGINE - Estão disponiveis -> 'django.db.backends.sqlite3', 'django.db.backends.postgresql', 'django.db.backend.mysql', 'django.db.backends.oracle'
	* NAME - O nome do seu banco de dados. Se você estiver usando SQLite, o banco de dados será um arquivo em seu computador; neste caso, NAME deve ser o caminho absoluto completo, incluindo o nome do arquivo. O valor padrão, armazenará o arquivo em seu diretório do porjeto. BASE_DIR/'db.sqlite3'

	Se você não estiver usando o SQLite como seu banco de dados, configurações adicionais, como USER, PASSWORD e HOST, deverão ser adicionadas.
	Enquanto estiver editando, defina TIME_ZONE como seu fuso horário em settings.py .
	
	Além disso, observe a configuração de INSTALLED_APPS na parte superior do arquivo.
	Isso contém os nomes de todos os aplicativos Django que estão ativados.
	Os aplicativos podem ser usados em vários projetos, e você pode empacotar e distribuí-los para uso por outros em seus projetos.

	Por padrão INSTALLED_APPS contém os seguintes aplicativos, todos os quais vem com o Django.

	* django.contrib.admin - O site de administração. Você vai usá-lo em breve.
	* django.contrib.auth - Um sistema de autenticação.
	* django.contrib.contenttypes - Uma estrutura para tipos de conteúdo.
	* django.contrib.sessions - Uma estrutura de sessão.
	* django.contrib.messages - Uma estrutura de mensagens.
	* django.contrib.staticfiles - Uma estrutura para gerenciar arquivos estáticos.

	Esses aplicativos são incluídos por padrão como uma conveniência para o caso comum.
	
	Alguns desses aplicativos fazem uso de pelo menos uma tabela de banco de dados, no entanto, precisamos criar as tabelas no banco de dados antes de podermos usá-las.
	Para fazer	isso, execute o comando:
	"python manage.py migrate"

	O comando "migrate" examina a configuração INSTALLED_APPS e cria todas as tabelas de banco de dados necessárias de acordo com as configurações do banco de dados em seu arquivo e as migrações de banco de dados enviadas com o aplicativo.
	Você verá uma mensagem para cada migração que se aplica.
	Se você estiver interessado, execute o cliente de linha de comando para o seu banco de dados e tipo(o banco de dados que escolheu) para exibir as tabelas que odjango criou.

CRIANDO MODELOS
	Agora vamos definir seus modelos - essencialmente, seu layout de banco de dados, com metadados adicionais.
	
	Um modelo é a fonte única e definitiva de informações sobre seus dados.
	Ela contém os campos e comportamentos essenciais dos dados que você está armazenando.
	Django segue o Princípio DRY. O objetivo é definir o seu modelo de dados em um só lugar e derivar automaticamente as coisas a partir dele.

	Isso inclui as migrações - ao contrário do Ruby On Rails, por exemplo, migrações são inteiramente derivados do seu arquivo de modelos e são essencialmente um histórico que o Django pode percorrer para atualizar seu esquema de banco de dados para corresponder aos seus modelos atuais.
	
	Esses conceitos são representados por classes Python. Edite o para que ele se pareça com isto:
	No diretorio do App arquivo models.py
	"
		from django.db import models


		class Question(models.Model):
   			question_text = models.CharField(max_length=200)
    			pub_date = models.DateTimeField('date published')


		class Choice(models.Model):
    			question = models.ForeignKey(Question, on_delete=models.CASCADE)
    			choice_text = models.CharField(max_length=200)
    			votes = models.IntegerField(default=0)
	"

	Aqui cada modelo é representado por uma classe de subclasses django.db.models.Model .
	Cada modelo tem um número de variáveis de classe, cada um dos quais representa um campo de banco de dados no modelo.

	Cada campo é representado por uma instância de uma classe Field - por exemplo, Charfield para campos de caracteres e DateTimeField para datetimes.
	Isso diz a Django que tipo de dados cada campo retém.
	
	O nome de cada instância de campo(por exemplo) é o nome do campo, em condições de uso amigável formato.
	Você usará esse valor em seu código python e seu banco de dados usará ele como o nome da coluna. question_text pub_date
	
	Você pode usar um primeiro argumento opcional para um Fiel para designar um nome legível por humanos.
	Isso é usado em algumas partes introspectivas do Django, e ele funciona como documentação.
	Se esse campo não for fornecido, o Django usará o nome legível por máquina.

	Algumas classes Field têm argumentos obrigatórios. CharField, por exemplo, exige que você dê a ele uma max_lenght.
	Isso é usado não apenas no esquema de banco de dados, mas em validação, como veremos em breve.

	Um Field também pode ter vários argumentos opcionais; nesse caso, definimos o valor default de 0.
	
	Finalmente observe que um relacionamento é definido, usando ForeignKey.
	Isso diz a Django eachis relacionado a um single.
	Django suporta todo o banco de dados comum relacionamentos: muitos-para-um, muitos-para-muitos e um-para-um.

ATIVANDO MODELOS
	Esse pequeno pedaço de código de modelo dá ao Django muita informação. Com ele, Django é capaz de:
	* Criar um esquema de banco de dados (instruções) para este aplicativo. CREATE TABLE
	* Criar uma API de acesso ao banco de dados Python para accessingandobjects. QuestionChoice
	
	Mas primeiro precisamos dizer ao nosso projeto que o aplicativo está instalado.

	Para incluir o aplicativo em nosso projeto, precisamos adicionar uma referência a sua classe de configuração na configuração de INSTALLED_APPS.
	
	A classe está no arquivo settings.py.
	Edite o arquivo e adicione esse caminho pontilhado à configuração INSTALLED_APPS.44
	Vai ficar tipo isso:
		INSTALLED_APPS = [
    			'polls.apps.PollsConfig',
    			'django.contrib.admin',
    			'django.contrib.auth',
    			'django.contrib.contenttypes',
   			'django.contrib.sessions',
    			'django.contrib.messages',
    			'django.contrib.staticfiles',
			]
	'polls' é o nome do App
	
	Agora que o django sabe incluir o App. Vamos executar outro comando:
		'python manage.py makemigrations polls' -> polls é o nome do app
	Você deve ver algo semelhante a:
		Migrations for 'Nome App':
			nomeApp/migrations/0001_initial.py
			- Create model Question
			- Create model Choice
	
	Ao executar este comando, você está dizendo ao Django que você fez algumas alterações em seus modelos (neste caso, você fez novos) e que você gostaria que as alterações fossem armazenadas como uma migração. 'makemigrations'
	
	As migrações são como o Django armazena as alterações em seus modelos (e, portanto, em seus modelos esquema de banco de dados) - são arquivos em disco. Você pode ler a migração para o seu novo modelo, se quiser; é o arquivo. Não se preocupe, não se espera que você os leia toda vez que o Django fizer um, mas eles são projetados para serem editáveis por humanos, caso você queira ajustar manualmente como Django muda as coisas.polls/migrations/0001_initial.py

	O comando 'sqlmigrate' retorna o seu banco de dados
		'python manage.py sqlmigrate nomeAPP 0001'
	Você deve ver algo semelhante a:
		BEGIN;
		--
		-- Create model Question
		--
		CREATE TABLE "polls_question" (
    			"id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    			"question_text" varchar(200) NOT NULL,
    			"pub_date" timestamp with time zone NOT NULL
		);
		--
		-- Create model Choice
		--
		CREATE TABLE "polls_choice" (
    			"id" bigint NOT NULL PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    			"choice_text" varchar(200) NOT NULL,
    			"votes" integer NOT NULL,
    			"question_id" bigint NOT NULL
		);
		ALTER TABLE "polls_choice"
  			ADD CONSTRAINT "polls_choice_question_id_c5b4b260_fk_polls_question_id"
    				FOREIGN KEY ("question_id")
    				REFERENCES "polls_question" ("id")
    				DEFERRABLE INITIALLY DEFERRED;
		CREATE INDEX "polls_choice_question_id_c5b4b260" ON "polls_choice" ("question_id");

		COMMIT;

	Observe o seguinte:

	- A saída exata variará dependendo do banco de dados que você está usando. O exemplo acima é gerado para PostgreSQL.
	- Os nomes das tabelas são gerados automaticamente combinando o nome do aplicativo () e o nome minúsculo do modelo –e. (Você pode substituir esse comportamento.)pollsquestionchoice
	- As chaves primárias (IDs) são adicionadas automaticamente. (Você também pode substituir isso.)
	- Por convenção, o Django acrescenta ao nome do campo da chave estrangeira. (Sim, você também pode substituir isso.)"_id"
	- A relação de chave estrangeira é explicitada por uma restrição. Não se preocupe com as peças; é revelador PostgreSQL para não impor a chave estrangeira até o final da transação.FOREIGN KEYDEFERRABLE
	- Ele é adaptado ao banco de dados que você está usando, portanto, tipos de campo específicos do banco de dados tais como(MySQL),(PostgreSQL), ou (SQLite) são tratados para você automaticamente. O mesmo vale para a citação de nomes de campos – por exemplo, usando aspas duplas ou aspas simples.auto_incrementbigint PRIMARY KEY GENERATED BY DEFAULT AS IDENTITYinteger primary key autoincrement
	- Naverdade, o comando sqlmigratenão executa a migração no seu banco de dados - em vez disso, ele imprime na tela para que você possa ver o que SQL Django acha que é necessário. É útil para verificar o que o Django vai fazer ou se você tiver administradores de banco de dados que exijam scripts SQL para Alterações.

	Se você estiver interessado, você também pode executarpythonmanage.pycheque; isso verifica se há problemas em seu projeto sem fazer migrações ou tocar no banco de dados.

	Agora, execute migrate novamente para criar essas tabelas de modelo em seu banco de dados:
		$ python manage.py migrate
		Operations to perform:
  		Apply all migrations: admin, auth, contenttypes, polls, sessions
		Running migrations:
  			Rendering model states... DONE
  			Applying polls.0001_initial... OK
		
	O comando migrate aceita todas as migrações que não foram aplicado (Django rastreia quais são aplicados usando uma tabela especial em seu banco de dados chamado) e os executa em seu banco de dados - essencialmente, sincronizando as alterações feitas em seus modelos com o esquema no banco de dados. django_migrations
	As migrações são muito poderosas e permitem que você altere seus modelos ao longo do tempo, à medida que você desenvolver seu projeto, sem a necessidade de excluir seu banco de dados ou tabelas e fazer novos - é especializado em atualizar seu banco de dados ao vivo, sem perda de dados. Vamos abordá-los com mais profundidade em uma parte posterior do tutorial, mas, por enquanto, lembre-se do guia de três etapas para fazer alterações no modelo:

	- Altere seus modelos (em). models.py
	- Execute "python manage.py makemigrations" para criar migrações para essas alterações
	- Execute "python manage.py migrate" para aplicar essas alterações a o banco de dados.

	O motivo pelo qual há comandos separados para fazer e aplicar migrações é porque você confirmará migrações para seu sistema de controle de versão e as enviará com seu aplicativo; eles não só tornam o seu desenvolvimento mais fácil, eles também são utilizável por outros desenvolvedores e em produção.

	Leia adocumentação do django-admin para obter informações completas informações sobre o que o utilitário pode fazer. manage.py

BRINCANDO COM A API
	Agora, vamos pular para o shell Python interativo e brincar com o API que o Django nos da. Para invocar o shell do Python, use este comando:

	"py manage.py shell"
	Estamos usando isso em vez de simplesmente digitar "python", porque define a variável de ambiente DJANGO_SETTINGS_MODULE, o que dá Django o caminho de importação Python para o seu arquivo. manage.py mysite/settings.py

	Quando estiver no shell, explore a API do banco de dados:
		>>> from polls.models import Choice, Question  # Import the model classes we just wrote.

		# Podemos ver que não a nenhum item salvo em Questions.
		>>> Question.objects.all()
		<QuerySet []>

		# Vamos criar uma nova Question.
		# O Suporte para horario atual (time zone) esta ativado no documento settings.
		# importe a biblioteca timezone de django.utils
		# Django pode salvar o horario em pub_date. Use timezone.now() para pegar um horario

		>>> from django.utils import timezone
		>>> q = Question(question_text="What's new?", pub_date=timezone.now())

		# Esse comando salvo o objeto no banco de dados. basta usar o comando save().
		>>> q.save()

		# Aqui você pega o id gerado pelo banco de dados.
		>>> q.id
		1

		# Acesse os valores pelo python atraves de atributos.
		>>> q.question_text
		"What's new?"
		>>> q.pub_date
		datetime.datetime(2012, 2, 26, 13, 0, 0, 775217, tzinfo=datetime.timezone.utc)

		# adicione novos valores atravez de atributos, não esqueça do comando save().
		>>> q.question_text = "What's up?"
		>>> q.save()

		# objects.all() mostra todos os item cadastrados no banco de dados de Question.
		>>> Question.objects.all()
		<QuerySet [<Question: Question object (1)>]>

	Espere um minuto. não é útil a representação deste objeto. Vamos corrigir isso editando o modelo (no arquivo) e adicionando a __str__() método ao bot hand:
		from django.db import models

		class Question(models.Model):
			# ...
			def __str__(self):
				return self.question_text

		class Choice(models.Model):
			# ...
			def __str__(self):
				return self.choice_text
	
	É importante adicionar__str__()métodos ao seu modelos, não só para sua própria conveniência ao lidar com o interativo mas também porque as representações dos objetos são usadas em todo o Django's administrador gerado automaticamente.

	Vamos também adicionar um método personalizado a este modelo:
		import datetime

		from django.db import models
		from django.utils import timezone


		class Question(models.Model):
			# ...
			def was_published_recently(self):
				return self.pub_date >= timezone.now() - datetime.timedelta(days=1)
	
	Observe a adição, para referenciar o módulo datetime padrão do Python e o do Django utilitários relacionados ao fuso horário em django.utils.timezone, respectivamente. Se você não está familiarizado com o manuseio de fuso horário em Python, você pode aprender mais, o fuso horário oferece suporte a documentos. import datetime from django.utils import timezone

	Salve essas alterações e inicie um novo shell interativo Python executando novamente: python manage.py shell
		>>> from polls.models import Choice, Question

		# Graças ao __str__() que adicionamos, podemos agora ver oque está escrito.
		>>> Question.objects.all()
		<QuerySet [<Question: What's up?>]>

		# Django oferece uma rica API de pesquisa de banco de dados inteiramente desenvolvida por
		# argumentos de palavra-chave.
		>>> Question.objects.filter(id=1)
		<QuerySet [<Question: What's up?>]>
		>>> Question.objects.filter(question_text__startswith='What')
		<QuerySet [<Question: What's up?>]>

		# obtem a pergunta (que foi passada a question) que foi publicada este ano.
		>>> from django.utils import timezone
		>>> current_year = timezone.now().year
		>>> Question.objects.get(pub_date__year=current_year)
		<Question: What's up?>

		# Se pesquisar por um ID que não existe. Ele da um exception.
		>>> Question.objects.get(id=2)
		Traceback (most recent call last):
			...
		DoesNotExist: Question matching query does not exist.

		# A pesquisa por chave primaria é a mais comun, então Django fornece um
		# atalho para pesquisa exata de schave primaria.
		# O codigo seguinte é identico a Question.objects.get(id=1).
		>>> Question.objects.get(pk=1)
		<Question: What's up?>

		# certifique-se de que o nosso methodo personalizado funcionou.
		>>> q = Question.objects.get(pk=1)
		>>> q.was_published_recently()
		True

		# dê á Question algumas opções. A chamada create constrói um novo
		# Choice object, faz a instrução INSERT, adiciona a opção ao conjunto
		# de escolha disponivel e retorna o novo Objeto Choice. Django cria
		# um conjunto para manter o "outro lado" de uma relação ForeignKey
		# (por exemplo, a escolha de uma pergunta) que pode ser acessada por meio da API.
		>>> q = Question.objects.get(pk=1)

		# exibir todas as opções do objeto relacionado, definido como -- none até agora.
		>>> q.choice_set.all()
		<QuerySet []>

		# Crie três choices.
		>>> q.choice_set.create(choice_text='Not much', votes=0)
		<Choice: Not much>
		>>> q.choice_set.create(choice_text='The sky', votes=0)
		<Choice: The sky>
		>>> c = q.choice_set.create(choice_text='Just hacking again', votes=0)

		# Os objetos Choice têm acesso á API para seus objetos Question relacionados.
		>>> c.question
		<Question: What's up?>

		# E vice-versa: os objetos Question obtêm acesso aos objetos Choice.
		>>> q.choice_set.all()
		<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>
		>>> q.choice_set.count()
		3

		# A API segue automaticamente os relacionamentos até onde você precisar.
		# Use sublinhados duplos para separar relacionamentos.
		# Isso funciona em quantos niveis você quiser, não há limite.
		# Encontre todas as opções para qualquer questão cujo pub_date seja neste ano
		# (reutilizando a variavel 'current_year' que criamos acima).
		>>> Choice.objects.filter(question__pub_date__year=current_year)
		<QuerySet [<Choice: Not much>, <Choice: The sky>, <Choice: Just hacking again>]>

		# Vamos deletar uma das opções. Use delete() para isso.
		>>> c = q.choice_set.filter(choice_text__startswith='Just hacking')
		>>> c.delete()

	Para obter mais informações sobre relações de modelo, consulte Acessando objetos relacionados. Para saber mais sobre como usar sublinhados duplos para executar pesquisas de campo por meio da API, consulte Pesquisas de campo. Durante detalhes completos sobre a API do banco de dados, consulte nossa referência da API do banco de dados.

APRESENTANDO O DJANGO ADMIN
	Filosofia
		Gerando sites de administração para sua equipe ou clientes adicionarem, alterarem e excluírem O conteúdo é um trabalho tedioso que não requer muita criatividade. Para isso O Django automatiza totalmente a criação de interfaces de administração para modelos.
		Django foi escrito em um ambiente de redação, com uma separação muito clara. entre "editores de conteúdo" e o site "público". Os gerentes de site usam o sistema para adicionar notícias, eventos, resultados esportivos, etc., e esse conteúdo é exibido no site público. Django resolve o problema de criar um interface unificada para os administradores de site editarem o conteúdo.
		O administrador não se destina a ser usado pelos visitantes do site. É para o site gestores.
	
	Criando um usuario adiministrador
		Primeiro, precisamons criar um usuário que possa fazer login no site de administração. Execute o seguinte comando:
			"python manage.py createsuperuser"
		Digite o nome de usuário desejado e pressione enter.
			'username: admin'
		Voçê será solicitado a fornecer o endereço de e-mail desejado:
			"Email address: admin@exemplo.com"
		O passo final é introduzir a sua palavra-passe(senha). Sera pedido que introduza a sua senha duas vezes.

INICIAR O SERVIDOR DE DESENVOLVIMENTO
	O site de administração do Django é ativado por padrão. Vamos começar o desenvolvimento e explorá-lo.
	Se o servidor não estiver em execução, inicie-o da seguinte forma:
		"python manage.py runserver"
	Agora, abra o navegador da web e vá para "/admin/" em seu domínio local. Você deve ver a tela de login do administrador.
	Como a traduçao está ativada por padrão, se você definir LANGUAGE_CODE, a tela de login será exibida no determinado idioma (se o django tiver a tradução apropriada).

	Entre no site de administração
		Agora, tente fazer login com a conta de superusuário que você criou na etapa anterior. Você deve ver a página de índice de administração do Django.
		Você deve ver alguns tipos de conteúdo editável: grupos e usuários. Eles são fornecido por django.contrib.auth, a estrutura de autenticação enviada por Django.

TORNAR O APLICATIVO DE ENQUETE MODIFICÁVEL NO ADMIN
	Apenas mais uma coisa a fazer: precisamos dizer ao administrador que objetos ter uma interface de administração. Para fazer isso, abra o arquivo e edite-o para ter esta aparência: Questionpolls/admin.py
	arquivo: enquetes/admin.py
		from django.contrib import admin

		from .models import Question

		admin.site.register(Question)

EXPLORE A FUNCIONALIDADE DE ADMINISTRAÇÃO GRATUITA
	Agora que nos registramos, o Django sabe que ele deve ser exibido em a página de índice de administrador: Question

	Clique em "Perguntas". Agora você está na página "lista de alterações" para perguntas. Esta página exibe todas as perguntas no banco de dados e permite que você escolha uma para alterá-la. Há a pergunta "O que está acontecendo?" que criamos anteriormente.

	Clique na pergunta "O que está acontecendo?" para editá-la.

	Coisas a notar aqui:

	- O formulário é gerado automaticamente a partir domodelo.Question
	- Os diferentes tipos de campo de modelo (DateTimeField,CharField) correspondem ao HTML apropriado widget de entrada. Cada tipo de campo sabe como se exibir no Django admin.
	- CadaDateTimeFieldrecebe JavaScript gratuito Atalhos. As datas recebem um atalho "Hoje" e um pop-up de calendário, e as horas ficam um atalho "Agora" e um pop-up conveniente que lista os horários comumente inseridos.
	
	A parte inferior da página oferece algumas opções:

	- Salvar – Salva as alterações e retorna à página de lista de alterações para esse tipo de objeto.
	- Salvar e continuar editando – Salva as alterações e recarrega a página de administração para este objeto.
	- Salvar e adicionar outro – Salva as alterações e carrega um novo formulário em branco para isso tipo de objeto.
	- Excluir – Exibe uma página de confirmação de exclusão.

	Se o valor de "Data de publicação" não corresponder à hora em que você criou o pergunta noTutorial 1, provavelmente significa que você esqueceu de definir o valor correto para a configuração TIME_ZONE. Altere-o, recarregue a página e verifique se o valor correto aparece.
	Altere a "Data de publicação" clicando nos atalhos "Hoje" e "Agora". Então clique em "Salvar e continuar editando". Em seguida, clique em "Histórico" no canto superior direito. Você verá uma página listando todas as alterações feitas neste objeto através do administrador do Django, com o carimbo de data/hora e o nome de usuário da pessoa que fez a alteração.
	